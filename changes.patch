diff --git a/src/components/certifications/MyCertifications.tsx b/src/components/certifications/MyCertifications.tsx
index b38c80b..846d56b 100644
--- a/src/components/certifications/MyCertifications.tsx
+++ b/src/components/certifications/MyCertifications.tsx
@@ -3,222 +3,176 @@ import UserSideBar from "../courses/UserSideBar";
 import Image from "next/image";
 import red_love from "@/assets/red_love.svg";
 import love from "@/assets/love.svg";
-import card from "@/assets/card.svg";
-import { useFetchCID } from "@/hooks/useFetchCID";
+import { certContent } from "@/constants/data";
 
 const MyCertifications = (props: any) => {
-  const [selected, setSelected] = useState("All NFTs");
+  const [selected, setSelected] = useState("");
   const [page, setPage] = useState("");
-  const [certificates, setCertificates] = useState<any[]>([]);
-  const { fetchCIDContent } = useFetchCID();
+
+  console.log("Here", props.takenCoursesData);
 
   useEffect(() => {
     setPage("myCertificate");
   }, []);
 
-  useEffect(() => {
-    console.log("Props updated:", {
-      address: props.address,
-      certifiedCourses: props.certifiedCourses,
-    });
-  }, [props.address, props.certifiedCourses]);
-
-  useEffect(() => {
-    const fetchCourseData = async () => {
-      if (props.certifiedCourses && props.certifiedCourses.length > 0) {
-        try {
-          console.log(
-            "Starting to process certified courses:",
-            props.certifiedCourses,
-          );
-
-          const transformedCertificates = await Promise.all(
-            props.certifiedCourses.map(async (course: any) => {
-              try {
-                console.log("Processing course:", {
-                  identifier: course.course_identifier,
-                  ipfsUri: course.course_ipfs_uri,
-                });
-
-                const courseData = await fetchCIDContent(
-                  course.course_ipfs_uri,
-                );
-                console.log(
-                  "Raw course data from IPFS:",
-                  JSON.stringify(courseData, null, 2),
-                );
-
-                if (!courseData || !courseData.data) {
-                  console.log(
-                    "No course data found for course:",
-                    course.course_identifier,
-                  );
-                  return null;
-                }
-
-                // Access the nested data structure
-                const courseInfo = courseData.data;
-                console.log("Course info:", courseInfo);
-
-                // Transform the data using the nested structure
-                const certificate = {
-                  cert_name: courseInfo.courseName || "Unnamed Course",
-                  recipient: props.address || "Unknown",
-                  author: courseInfo.courseCreator || "Unknown",
-                  nft_description:
-                    courseInfo.courseDescription || "No description available",
-                  img: courseInfo.courseImage
-                    ? `https://gateway.pinata.cloud/ipfs/${courseInfo.courseImage}`
-                    : "/default-certificate.png",
-                  type: "course", // Add type identifier
-                };
-
-                console.log("Created certificate:", certificate);
-                return certificate;
-              } catch (error) {
-                console.error(
-                  "Error processing course:",
-                  course.course_identifier,
-                  error,
-                );
-                return null;
-              }
-            }),
-          );
-
-          const validCertificates = transformedCertificates.filter(
-            (cert): cert is any => cert !== null,
-          );
-
-          console.log("Final valid certificates:", validCertificates);
-          setCertificates(validCertificates);
-        } catch (error) {
-          console.error("Error in fetchCourseData:", error);
-          setCertificates([]);
-        }
-      } else {
-        console.log("No certified courses to process");
-        setCertificates([]);
-      }
-    };
-
-    fetchCourseData();
-  }, [props.certifiedCourses, props.address, fetchCIDContent]);
-
-  // Filter certificates based on selected type
-  const filteredCertificates = React.useMemo(() => {
-    if (selected === "All NFTs") {
-      return certificates;
-    } else if (selected === "Course NFTs") {
-      return certificates.filter((cert) => cert.type === "course");
-    } else {
-      // For "Event NFTs" and "Bootcamp NFTs", return empty array
-      return [];
-    }
-  }, [certificates, selected]);
-
-  const renderCertificates = () => {
-    if (selected === "Event NFTs" || selected === "Bootcamp NFTs") {
-      return (
-        <div className="flex flex-col items-center justify-center min-h-[400px] w-full">
-          <div className="flex flex-col items-center justify-center space-y-4">
-            <Image
-              src={card}
-              alt="No certificates"
-              width={200}
-              height={200}
-              className="w-32 h-32"
-            />
-            <p className="text-gray-500 text-lg">No certificate</p>
-            <button
-              className="text-white px-6 py-2 rounded-lg transition-colors"
-              style={{
-                background:
-                  "linear-gradient(103.42deg, #9B51E0 16.73%, #4A90E2 64.74%)",
-              }}
-            >
-              Browse course
-            </button>
-          </div>
-        </div>
-      );
-    }
-
+  if (selected == "" || selected == "All NFTs") {
     return (
-      <div className="grid sm:grid-cols-2 xl:grid-cols-3 md:gap-y-8 md:gap-x-3 my-6">
-        {filteredCertificates.map((cert, j) => (
-          <div
-            key={j}
-            className="bg-[#FFFFFF] rounded-xl shadow-lg my-4 sm:my-0 w-full"
-          >
-            <div className="relative">
-              <Image
-                src={cert.img}
-                alt={cert.cert_name}
-                width={400}
-                height={300}
-                className="object-cover w-full h-[200px]"
-              />
-              <div className="bg-white absolute right-3 top-3 flex py-1 px-2 rounded">
-                <Image src={red_love} alt="love" />
-                <p className="text-xs ml-3">18k</p>
-              </div>
-            </div>
-
-            <div className="px-8 py-6">
-              <div className="flex justify-between items-center py-1">
-                <h4 className="text-[14px] text-[#333333] font-bold leading-[15px]">
-                  {cert.cert_name}
-                </h4>
-                <Image src={love} alt="love" className="h-[12px] w-[13px]" />
-              </div>
-              <div className="flex justify-between my-3">
-                <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
-                  Recipient address:
-                </p>
-                <p className="text-[9px] text-[#A01B9B] font-medium leading-[15px] truncate max-w-[120px]">
-                  {cert.recipient}
-                </p>
-              </div>
-              <div className="flex justify-between my-3">
-                <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
-                  Author:
-                </p>
-                <p className="text-[9px] text-[#333333] font-medium leading-[15px] truncate max-w-[120px]">
-                  {cert.author}
-                </p>
-              </div>
-
-              <div>
-                <p className="text-[9px] lg:text-[10px] text-[#333333] font-medium leading-[15px] line-clamp-2">
-                  {cert.nft_description}
-                </p>
+      <div className="lg:flex max-w-screen-2xl xl:mx-auto">
+        <UserSideBar
+          wallet={props.wallet}
+          courseData={props.courseData}
+          takenCoursesData={props.takenCoursesData}
+          page={page}
+          selected={selected}
+          setSelected={setSelected}
+        />
+
+        <div className="w-full sm:mx-auto px-4 my-12 ">
+          {certContent.map((item, i) => (
+            <div key={i} className="w-[100%]">
+              <h1 className="text-[#A01B9B] font-bold text-2xl">
+                {item.heading} ({item.no})
+              </h1>
+
+              <div className="grid sm:grid-cols-2 xl:grid-cols-3 md:gap-y-8 md:gap-x-3 my-6 ">
+                {item.certificates.map((cert, j) => (
+                  <div
+                    key={j}
+                    className="bg-[#FFFFFF] rounded-xl shadow-lg my-4 sm:my-0 w-full "
+                  >
+                    <div className="relative">
+                      <Image
+                        src={cert.img}
+                        alt={cert.cert_name}
+                        className="object-cover w-[100%]"
+                      />
+                      <div className="bg-white absolute right-3 top-3 flex py-1 px-2 rounded">
+                        <Image src={red_love} alt="love" color="red" />
+                        <p className="text-xs ml-3">18k</p>
+                      </div>
+                    </div>
+
+                    <div className="px-8 py-6">
+                      <div className="flex justify-between items-center py-1">
+                        <h4 className="text-[14px] text-[#333333] font-bold leading-[15px]">
+                          {cert.cert_name}
+                        </h4>
+                        <Image
+                          src={love}
+                          alt="love"
+                          className="h-[12px] w-[13px]"
+                        />
+                      </div>
+                      <div className="flex justify-between my-3">
+                        <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
+                          Recipient address:{" "}
+                        </p>
+                        <p className="text-[9px] text-[#A01B9B] font-medium leading-[15px]">
+                          {cert.recipient}
+                        </p>
+                      </div>
+                      <div className="flex justify-between my-3">
+                        <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
+                          Author:{" "}
+                        </p>
+                        <p className="text-[9px] text-[#333333] font-medium leading-[15px]">
+                          {cert.author}
+                        </p>
+                      </div>
+
+                      <div>
+                        <p className="text-[9px] lg:text-[10px] text-[#333333] font-medium leading-[15px]">
+                          {cert.nft_description}
+                        </p>
+                      </div>
+                    </div>
+                  </div>
+                ))}
               </div>
             </div>
-          </div>
-        ))}
+          ))}
+        </div>
       </div>
     );
-  };
+  }
 
   return (
-    <div className="block lg:flex lg:mx-10 mb-8 pb-24 max-w-screen-2xl xl:mx-auto">
+    <div className="lg:flex max-w-screen-2xl xl:mx-auto">
       <UserSideBar
         wallet={props.wallet}
-        courseData={[]}
-        takenCoursesData={[]}
-        validCertificates={certificates}
+        courseData={props.courseData}
+        takenCoursesData={props.takenCoursesData}
         page={page}
         selected={selected}
         setSelected={setSelected}
       />
 
-      <div className="w-full sm:mx-auto px-4 my-12">
-        <h1 className="text-[#A01B9B] font-bold text-2xl mb-6">
-          {selected} Certifications ({filteredCertificates.length})
-        </h1>
-
-        {renderCertificates()}
+      <div className="w-full sm:mx-auto px-4 my-12 ">
+        {certContent.map((item, i) =>
+          item.type == selected ? (
+            <div key={i} className="w-[100%]">
+              <h1 className="text-[#A01B9B] font-bold text-2xl">
+                {item.heading} ({item.no})
+              </h1>
+
+              <div className="grid sm:grid-cols-2 xl:grid-cols-3 md:gap-y-8 md:gap-x-3 my-6 ">
+                {item.certificates.map((cert, j) => (
+                  <div
+                    key={j}
+                    className="bg-[#FFFFFF] rounded-xl shadow-lg my-4 sm:my-0 w-full "
+                  >
+                    <div className="relative">
+                      <Image
+                        src={cert.img}
+                        alt={cert.cert_name}
+                        className="object-cover w-[100%]"
+                      />
+                      <div className="bg-white absolute right-3 top-3 flex py-1 px-2 rounded">
+                        <Image src={love} alt="love" color="red" />
+                        <p className="text-xs ml-3">18k</p>
+                      </div>
+                    </div>
+
+                    <div className="px-8 py-6">
+                      <div className="flex justify-between items-center py-1">
+                        <h4 className="text-[14px] text-[#333333] font-bold leading-[15px]">
+                          {cert.cert_name}
+                        </h4>
+                        <Image
+                          src={love}
+                          alt="love"
+                          className="h-[12px] w-[13px]"
+                        />
+                      </div>
+                      <div className="flex justify-between my-3">
+                        <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
+                          Recipient address:{" "}
+                        </p>
+                        <p className="text-[9px] text-[#A01B9B] font-medium leading-[15px]">
+                          {cert.recipient}
+                        </p>
+                      </div>
+                      <div className="flex justify-between my-3">
+                        <p className="text-[9px] text-[#333333] font-bold leading-[15px]">
+                          Author:{" "}
+                        </p>
+                        <p className="text-[9px] text-[#333333] font-medium leading-[15px]">
+                          {cert.author}
+                        </p>
+                      </div>
+
+                      <div>
+                        <p className="text-[9px] lg:text-[10px] text-[#333333] font-medium leading-[15px]">
+                          {cert.nft_description}
+                        </p>
+                      </div>
+                    </div>
+                  </div>
+                ))}
+              </div>
+            </div>
+          ) : null,
+        )}
       </div>
     </div>
   );
diff --git a/src/components/courses/UserSideBar.tsx b/src/components/courses/UserSideBar.tsx
index 661775a..ad7fd32 100644
--- a/src/components/courses/UserSideBar.tsx
+++ b/src/components/courses/UserSideBar.tsx
@@ -28,10 +28,9 @@ interface UserSideBarProps {
   wallet: any;
   courseData: any;
   takenCoursesData: any;
-  validCertificates: any;
-  page: string;
-  selected: string;
-  setSelected: (value: string) => void;
+  page: string; // or another type like `number` or a union type
+  selected: string; // Replace with appropriate type
+  setSelected: (value: string) => void; // Function that sets a value
 }
 interface argprop {
   no: number;
@@ -41,9 +40,8 @@ const UserSideBar = ({
   wallet,
   courseData,
   takenCoursesData,
-  validCertificates,
   page,
-  selected = "All NFTs",
+  selected,
   setSelected,
 }: UserSideBarProps) => {
   const [sideProperties, setSideProperties] = useState([
@@ -75,24 +73,6 @@ const UserSideBar = ({
 
   const [isFilterModalOpen, setFilterModalOpen] = useState(false); // State for filter modal
 
-  const [certificateEarned, setCertificateEarned] = useState([
-    {
-      title: "All NFTs",
-      no: 0,
-      type: "NFTs",
-    },
-    {
-      title: "Bootcamp",
-      no: 0,
-      type: "NFTs",
-    },
-    {
-      title: "Course",
-      no: 0,
-      type: "NFTs",
-    },
-  ]);
-
   const renderItem = (arg: argprop) => {
     if (arg.title == "Courses") {
       return (
@@ -123,6 +103,17 @@ const UserSideBar = ({
     }
   };
 
+  // const dummyName = useMemo(() => {
+  //   if (
+  //     wallet?.address &&
+  //     typeof wallet?.address === "string" &&
+  //     wallet?.address.trim() !== ""
+  //   ) {
+  //     return controller.username();
+  //   }
+  //   return "No User";
+  // }, [wallet?.address]);
+
   useEffect(() => {
     if (!address) return;
     controller.username()?.then((n) => setUsername(n));
@@ -147,62 +138,11 @@ const UserSideBar = ({
     }
   }, [wallet?.address, courseData, takenCoursesData]);
 
-  useEffect(() => {
-    if (validCertificates) {
-      console.log("validCertificates:", validCertificates);
-
-      // Calculate total number of certificates (all valid certificates)
-      const totalCertificates = validCertificates.length;
-      console.log("Total certificates:", totalCertificates);
-
-      // Calculate number of bootcamp certificates (currently 0 as we don't have bootcamp data)
-      const bootcampCertificates = 0;
-
-      // Calculate number of course certificates (all current certificates are course certificates)
-      const courseCertificates = validCertificates.length;
-
-      const updatedCertificates = [
-        {
-          title: "All NFTs",
-          no: totalCertificates,
-          type: "NFTs",
-        },
-        {
-          title: "Bootcamp",
-          no: bootcampCertificates,
-          type: "NFTs",
-        },
-        {
-          title: "Course",
-          no: courseCertificates,
-          type: "NFTs",
-        },
-      ];
-
-      console.log("Updated certificates:", updatedCertificates);
-      setCertificateEarned(updatedCertificates);
-    } else {
-      console.log("No valid certificates available");
-      // Reset to 0 if no valid certificates
-      setCertificateEarned([
-        {
-          title: "All NFTs",
-          no: 0,
-          type: "NFTs",
-        },
-        {
-          title: "Bootcamp",
-          no: 0,
-          type: "NFTs",
-        },
-        {
-          title: "Course",
-          no: 0,
-          type: "NFTs",
-        },
-      ]);
-    }
-  }, [validCertificates]);
+  // Function to handle filter selection
+  const handleFilterSelection = (filter: string) => {
+    setSelected(filter);
+    setFilterModalOpen(false); // Close the modal after selection
+  };
 
   return (
     <>
@@ -215,7 +155,7 @@ const UserSideBar = ({
       <div className="pt-12 px-4">
         {/* User info */}
 
-        <div className="bg-white py-4 px-8 rounded-xl border-[1px] border-[#BCBCBC] lg:w-[293px] xl:w-[400px] mb-6">
+        <div className="bg-white py-4 px-8 rounded-xl border-[1px] border-[#BCBCBC] lg:w-[293px] xl:w-[400px]">
           <div>
             <div className="flex justify-between items-center mt-4">
               <div className="flex space-x-4">
@@ -246,7 +186,7 @@ const UserSideBar = ({
             </div>
           </div>
 
-          <div className="my-4 mb-8">
+          <div className="my-4">
             {page == "myCourse" &&
               coursesProgress.map((item, i) => (
                 <div
@@ -288,7 +228,6 @@ const UserSideBar = ({
                 </div>
               ))}
           </div>
-          <div className="mb-5"></div>
         </div>
 
         {page == "myCourse" &&
